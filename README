A port of ChucK's strong timing to Ruby!

ruck lets you easily create a virtual clock against
which precise timing of execution can be guaranteed. The
virtual clock can be kept roughly in sync with real time
if you want it to, but you don't have to. For example, in
ChucK, even if your scripts take too long to generate
samples in real time, the audio stream isn't compromised
because it's timed against the virtual clock.

ruck provides an easily extended scheduler for non-preemptive
shreds (threads) implemented using continuations.
Cooperatively scheduled threads usually don't require
synchronization since execution is never interrupted.

A few example shredulers (schedulers) are provided:

UGenShreduler:

  Recently moved to its own gem: ruck-ugen

RealTimeShreduler

  Recently moved to its own gem: ruck-realtime

MIDIShreduler

  Recently moved to its own gem: ruck-midi

GLAppShreduler

  You don't want to know. But see ruck-glapp if you do.

USAGE
=====

This project has tons of examples because even though the library
is tiny, there's a lot to test, and a lot of ways to use it.

For examples of how to implement your own Shreduler, see the bottom
of lib/ruck/shreduling.rb and all the scripts in bin/.

For example of how to use the provided Shredulers, check the
examples/ directory. Those scripts contain no boilerplate includes
because they are written to be invoked on the command line by
one of the bin/ scripts. For example:

  $ ruck_ugen examples/ugen/ex01.rb
